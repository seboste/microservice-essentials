# C/C++ with GCC

# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
  - main

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macOS-latest'
    windows:
      imageName: 'windows-latest'
  
pool:
    vmImage: $(imageName)
  
steps:
  - task: Bash@3
    displayName: Install Conan Mac
    condition: and(succeeded(), eq(variables['Agent.JobName'], 'Job mac'))
    inputs:
      targetType: 'inline'
      script: |
        brew update |
        brew install conan
  - task: Bash@3
    displayName: Install Conan
    condition: and(succeeded(), ne(variables['Agent.JobName'], 'Job mac'))
    inputs:
      targetType: 'inline'
      script: pip install conan
  - task: ArtifactoryConan@1
    displayName: Conan Install Dependencies
    inputs:
      conanCommand: 'Install'
      pathOrReference: '..'
      extraArguments: '-s build_type=Release -o build_testing=True -o build_examples=True'
      buildName: '$(Build.DefinitionName)'
      buildNumber: '$(Build.BuildNumber)'
      workingDirectory: 'build'
  - task: CMake@1
    displayName: CMake Configure
    inputs:
      cmakeArgs: '.. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=True -DBUILD_EXAMPLES=True'
      workingDirectory: 'build'
  - task: CMake@1
    displayName: CMake Build
    condition: and(succeeded(), ne(variables['Agent.JobName'], 'Job windows'))
    inputs:
      cmakeArgs: '--build .'
      workingDirectory: 'build'
  - task: CMake@1
    displayName: CMake Build Windows
    condition: and(succeeded(), eq(variables['Agent.JobName'], 'Job windows'))
    inputs:
      cmakeArgs: '--build . --config Release'
      workingDirectory: 'build'
  - task: Bash@3
    displayName: Test
    inputs:
      targetType: 'inline'
      script: |
        ctest --output-junit testResult.xml
      workingDirectory: 'build/tests'
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'build/tests/testResult.xml'      
  